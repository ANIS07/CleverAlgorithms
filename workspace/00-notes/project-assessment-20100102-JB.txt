Project Assessment, 2009-01-02, jasonb

My objective is to publish (write, print, put in book case) a book before I turn 30. It is a new year, 2010, and I turn 30 in about 1 year and 1 month. 

I have tried to write this book for a year, and made 6 major attempts.

The idea for the book was born in the perceived need to present the large number of computational intelligence / biologically inspired algorithms in a consistent and structured manner and communicating the lessons learned during the OAT project.

I have tried to write it like I wrote my thesis, by blocking out the chapters and sections and steam rolling through the content from end-to-end. This failed because unlike when I was writing my thesis, I am unable to spend all day every day solely thinking about and working on the book. I made good progress in blocking out the general areas I want to write about, how I want to write about them, and the general motivation for the book.

I tried focusing on the code, writing tutorials and sample code for 10 algorithms in the evolutionary computation chapter. This failed because the book is not about code, it is consolidating the research about the algorithms and presenting them in a consistent and structured manner. The approach did highlight the grounding capability of sample code and a tutorial explanation and showed how quickly such examples can be put together (10 algorithms in 10 days).

I tried writing the book as a blog, providing a high-level overview of each algorithm in a tutorial format with additional resources, a simplified version of the desired approach suitable for the web. This failed because a community did not magically materialize in the absence of marketing. The approach highlighted that a structured presentation does not have to be clinical and cold, that natural language will open up the accessibility of the content. The approach also considered the potential for demand and opportunities for profit by adapting the content to a social networking medium.

I tried to unify the previous approaches by taking all the desperate content and jamming it into a latex book structure. This failed because of the different styles used in each of the previous approaches and because unification was not writing, rather it was simply re-organizing. These two attempts highlighted the need for prolonged and consistent contribution to the project. 

I have a day job and I dissipate my cognitive surplus at work by reading science and technology news, and at home by watching american TV shows. This highlights that there is opportunity to contribute over a prolonged period, and that the contributions cannot be extended and contiguous periods of effort, that the effort can only be contributed in a discrete, piecewise, and ad hoc manner. 

A lesson learned in the PhD project is that the continuous production of small discrete work product provides amazing momentum and motivation. In the case of the PhD project, this took the form of technical reports, and this approach was generally tried with the blog approach. The discrete work product approach also seems appropriate given the nature of the contributions that can be made. Small, discrete, independent projects that can be completed in 2-4 man days of effort, that collectively provide direct contribution to the final product. With a sufficiently large number of these discrete work product completed and the associated momentum and motivation, effort may then be shifted directly to the final book product itself.

A problem with the blog approach was the expectation of conversation and the concern of self-consciousness of publishing the discrete work product in the public domain. In the case of the PhD project, the discrete work product were printed and placed into a folder that provided direct visual-tactile feedback to the author whilst keeping the work product private. The consolidation into the thesis provided the point of comment and feedback.

Book names, domain names, forums, feedback, background chapters, advanced chapters - these are the fun and interesting parts of the project, but the meat of the project are the algorithms themselves. The meat of the book is a collection of 30, 50, 100 (?) algorithm descriptions. This is the content of the work, the primary contribution of the work, and this is where the effort must be expended before anything else.  

A rhythm of contribution is required, much like the iphone development contributions that were provided in the morning and the evenings, and the competition and language exploration contributions that were provided at work at lunchtimes and in the late afternoons. These are two quite different modal forms of contribution: morning=short focused effort of about 1 hour, evening=medium focused effort of about 2-3 hours, work=ad hoc discontinuous semi-focused contribution of tens on minutes to hours, weekends ad hoc focused contributions of 2-3 hours.

The utility of the discrete formal work product methodology is that it facilitates redundancy, variation of structure and formation, and most importantly the exorcising of concerns and doubts. This is the biggest hindrance to productivity, momentum and motivation. This document is a point in fact, it is an exorcism of project concerns and doubts to date, which quickly focuses on potential solutions. The approach facilitates the focus of effort on the independent algorithms and allows inter-topic referencing through citations if there is crossover. Aspects such as general area introductions may also be independent work products. Additionally, algorithm overview and code example and tutorial may be separate work products, although this feels like an unnecessary decomposition.

An area that has not been addressed is the management of expectations. For example, in the case of the blog trial, a community did not spontaneously appear and join the cause. Even with the content being in the google index for many months, the content is accessed very infrequently. A focused marketing effort may change this, although reasonable expectations should be outlined upfront. This content is not universally engaging, it is specialized and niche. Additionally, it is likely only going to be engaging to the niche in aggregate. As a book, it will be lucky to sell a handful of copies. As a website, it will be luck to generate a handful of daily hits. The book does have a target audience (students, scientists, developers, interested amateurs) although it is unclear whether there is a market. The contribution to and completion of the product must be independent of this observation. A market is assumed, the author provides a the market, for now. The book is written for the author, and concerns of adaptation, marketing and engineering the product-market fit (delivery of the content) and concerns for after the book has been published (the original objective of the author). Making money, profit, direct monitory return on investment are not the primary objective, and therefore most likely will not occur. 

The product will be published as a real tangible book, which will cost to produce and may return a profit. Additionally, the content will be provided for free, likely as a ebook, and as a webpage or series of webpages. As such, the copyright and license of the content must be decided before the project is started. Likely a creative commons license will be chosen. This may influence the way contributions may be made to and managed within the project.

THe discrete contributions will be formal, and as such a project-branded technical report is appropriate. These reports may be printed and collected in a folder, may be disseminated to editors, and may even be posted to a project webpage, blocking out the transient table of contents. The reports themselves may be written in MS Word, Google Docs, or Latex. The latter is desired because it is the technology that will be used to produce the book, and early adoption will refine the tool-chain. Given the early adoption of a permissive license for the content, the project may be managed using a distributed version control system like sourceforge, google code, or github. This would allow the concurrent management of the technical reports, the book table of contents and content, as well as a webpage for the project. This openness and consolidation would also facilitate rapid iteration, for example automatically updating the book and webpage when each technical report is completed. A web-based DVCS also facilitates contributions to be made independent of the time or space (work or home). The concern is that the content may be leached and included in a competing product. This is mitigated by the extreme specialization of the content, the priority demonstrated in the DVCS, and the speed of change and iteration the author exhibit compared to exploiters of the content.

The project may be partitioned into /workspace that provides a workspace for content development (technical reports) that may or may not make it into the book, /book which represents the book itself including the management of the table of contents, and /web which represents the book in website form potentially involving a custom-made content management system specialized to the presentation of the book. The separation of the workspace from the book allows the formal exploration of ad hoc topics and concerns independent of the book content. Content developed in the workspace that is deemed suitable and good enough may migrate into the book. Additionally, the workspace provides a context for re-exploring previously investigated topics in new structures and forms and/or in the context of newly raised concerns ore newly discovered knowledge. It is believed this project structure provides enough flexibility, agility, and formality to facilitate the momentum and motivation to complete this project under the predicted conditions of effort contribution.

Some example topics for technical reports that have recently been preoccupying the author include: project motivation, algorithm presentation structure, algorithm implementation across programming paradigms (functional, object-oriented, functional, agent-oriented, pipeline, map-reduce, etc), field overview, sub-field overviews, algorithm tutorial language selection. 

The project was originally named algorithm atlas, it was named inspired algorithms and will be renamed to clever algorithms, a name that is both suitably generalized, accurate and possesses marketing appeal.
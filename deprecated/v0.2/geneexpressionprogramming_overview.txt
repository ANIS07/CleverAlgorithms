Gene Expression Programming Overview
Copyright (C) 2008 Jason Brownlee

Change History
2008/12/10  JB  Created

Inspiration
: Gene Expression Programming is inspired by the theory of evolution by means of natural selection.

Gene Expression Programming (GEP) is inspired by a computational perspective of evolution. The algorithm is inspired by the genotype-phenotype model where DNA provides a low level definition of an organism the genes of which are read to produce proteins and ultimately the phenotype of the organism.

Strategy
: The strategy for Gene Expression Programming is an evolutionary process that operates on a sub-symbolic representation of candidate solutions which is translated (expressed) as a solution to a given problem to be evaluated.

Gene Expression Programming uses a linear genome as the basis for genetic operators such as mutation, recombination, inversion, and transposition. The genome is comprised of chromosomes (typically one) and each chromosome is comprised of genes (one or more) that are translated into an expression tree to address a given problem. The strategy attempts to solve problems by creating programs represented as expression trees (like GP) although applies the genetic operators to a sub-symbolic representation of the expression trees (unlike a GP, more like a GA). As such it is similar in strategy to GE.

Procedure
A candidate solution is represented as a linear representation of an expression tree where each symbol maps to a function or terminal node. The linear representation is mapped to an expression tree in a breadth-first manner. The compressed representation is referred to as Karva notation or a K-expression within the context of the GEP field. 

A genome or K-expression is fixed length and is comprised of one or more sub-expressions (genes), which are also defined with a fixed length. A gene is comprised of two sections, a head which may contain any function or terminal symbols, and a tail section that may only contain terminal symbols. The size of the head is a system parameter, where as the tail length is calculated via a heuristic method that ensures that each gene will always translate (express) syntactically correct expression trees. The tail portion of the gene provides a genetic buffer which ensures closure of the genes expression. As such some or none of the information in the tail may be expressed, providing a flexible non-coding region in candidate solutions engendering the evolution of evolvability. 

The robust gene definition means that genetic operators can be applied to the sub-symbolic representation without concern for the resultant gene expression, providing separation of genotype and phenotype. 

For difficult problems, multiple genes (sub-expressions) are used and combined to address the problem. The sub-expressions are linked using link expressions which are function nodes that are either statically defined (such as a conjunction) or evolved on the genome with the genes.

The mutation operate substituted expressions along the genome, although must respect the gene rules such that function and terminal nodes are mutated in the head of genes, whereas only terminal nodes are substituted in the tail of genes. Crossover occurs between two selected parents from the population and can occur based on a one-point cross, two point cross, or finally a gene-based approach were genes are selected from the parents with uniform probability.

An inversion operator may be used with a low probability that reverses a small sequence of symbols (1-3) within a section of a gene (tail or head). A transposition operator may be used that has a number of different modes, including: duplicate a small sequences (1-3) from somewhere on a gene to the head, small sequences on a gene to the root of the gene, and moving of entire genes on the chromosome. In the case of intra-gene transpositions, the sequence in the head of the gene is moved down to accommodate the copied sequence and the length of the head is truncated to maintain consistent gene sizes.

Numeric constants can be included in the terminal node set, although GEP defines an alternative method. A '?' is included in the terminal set that represents a numeric constant from an array that are evolved on the end of the genome. The constants are read from the end of the genome and are substituted for '?' as the expression tree is created (in breadth first order). Finally the numeric constants are used as array indices in yet another chromosome of numerical values which are substituted into the expression tree. 

Heuristics
* Use of parsimony pressure to create expressions that solve the problem that are also small (concise and easier to read). For example, the objective fitness function can be scaled based on the number of nodes in the expression tree, perhaps a ratio of genome length to resultant expression tree.
* The length of a chromosome is defined by the number of genes, where a gene length is defined by h + t. h is a user defined parameter (such as 10), where as t is defined as t = h (n-1) + 1. n represents the maximum arity of functional nodes in the expression (such as 2 if the arithmetic function */-+ are used)
* Mutation is typically 1/L, selection can be any of the classical approaches (such as roulette wheel or tournament), and crossover rates are typically high (0.7 of offspring)
* Use multiple sub-expressions linked together on hard problems when one gene does not get much progress. Provides modularity in the solution for both evolvability and ultimate readability.


Further Reading
* Gene Expression programming: mathematical modeling by an artificial intelligence, 2nd edition (2006)
* Gene Expression Programming: Mathematical Modeling by an Artificial Intelligence, 1st edition (2002)
	- online: http://www.gene-expression-programming.com/GepBook/Introduction.htm
* Gene Expression Programming: A New Adaptive Algorithm for Solving Problems, Complex Systems, 13 (2): 87-129, 2001

Home: http://www.gene-expression-programming.com/

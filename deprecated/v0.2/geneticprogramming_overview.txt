Genetic Programming Overview
Copyright (C) 2008 Jason Brownlee

Change History
2008/12/06  JB  Created

Inspiration
: Genetic Programming is inspired by the biological theory of evolution by means of natural selection

Strategy
: The strategy for Genetic Programming is to exploit evolution to develop a program to complete a user defined task.

Genetic Programming (GP) is concerned with exploiting an evolutionary process to develop programs to solve a given problem. Candidate solutions are represented as executable programs, typically as expression trees in a scope limited functional language. Programs may or may not take input parameters and are assessed based upon their execution in the context of a problem domain. GP represent a different approach to evolutionary-based problem solving where instead of searching for a set of parameters to satisfy a model, a program-based model is evolved to satisfy the problem.

Procedure
A typical Genetic Programming algorithm involves the evolution of a population of candidate solutions of a number of generations of selection, recombination, and mutation. The expression tree representation requires specialized genetic operators for recombination and variation. The crossover operator involves pruning a part of the expression tree from one parent, and grafting on a sub-tree from a second parent. The mutation operator involves exchanging values or functions within the expression tree.

For example a program may use a set of arithmetic functions, each of which take two parameters, such as *\+-. A candidate solution may be be comprised of a mixture of the functions and numerical constants, arranged in a binary expression tree that is executed in a depth-first manner. 
   +
  / \
 2   4

A common way to represent such solutions is to use a LISP-like syntax that represents programs as binary-expression trees using the prefix notation. The above example would be presented as: (+ 2,4). Nodes in the tree that accept one or more parameters are referred to as 'function nodes', whereas those that do not accept a parameter such as numeric constant are called 'terminal nodes'.

Candidate solutions may be comprised of mathematic functions as well as domain specific functions, such a movement directions for a maze controller. More elaborate realizations of the algorithm allow for the evolution the functions used by the candidate solutions called automatically defined functions (ADF) or the evolution of the genetic operators applied to the candidate solutions each generation.

Initialize Population
While not Stop Condition
	Evaluation population (execute programs)
	Selection
	Crossover, Mutation
	Replacement
End

Heuristics
* Fitness assessments typically take the structure of the program into account (rewarding parsimony) as well as the problem specific evaluation
* Crossover points are biased towards selecting function nodes in the expression tree over terminals (90/10 split)
* The probability of a crossover event is typically high (90% of members) and the probability of a point mutation is typically low (1% of nodes)
* Typical execution involve large population sizes (100-500, sometimes much larger) over a relatively small number of generations (10 to 50)
* The function and terminal sets are domain dependent, and may direct interact with the problem (such as mathematic function or controller) or may construct a solution for evaluation (such as design problems).

Further Reading

- http://www.genetic-programming.com/
- Genetic Programming IV: Routine Human-Competitive Machine Intelligence (2003)
- A Field Guide to Genetic Programming (2008) http://www.gp-field-guide.org.uk/
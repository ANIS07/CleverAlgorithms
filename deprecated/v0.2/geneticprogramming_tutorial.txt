Genetic Programming Tutorial
Copyright (C) 2008 Jason Brownlee

Change History
2008/12/06  JB  Created

Introduction
This tutorial demonstrates an implementation of the Genetic Programming algorithm applied to the approximation of Pi using arithmetic mathematical functions.

Problem
The mathematical constant PI represents the ratio of a circles circumference to its diameter. There are many known approximations of PI, for example: 22/7, 355/113. 

This problem provides a good demonstration of the GP as the problem is simple in that it doesn't have any parameters or require multiple executions of the candidate solution against the problem definition, although requires the development of a mathematic expression (program) to approximate the value of Pi. The cost function is defined as the absolute difference from the value produced by a candidate solution to PI as defined by the ruby constant Math::PI (3.14159265358979). Engineers typically use Pi to 5 or 6 significant figures, so the problem is simplified to approximating PI rounded to 5 places: 3.14159.

The function set is limited to the four arithmetic functions: *, \, +, and - implemented as lambda's with an arity of 2. The terminal set is limited to constant floating point values between 0 and 1. The cost function involves evaluating a given solution's expression and calculating the absolute difference between the resulting value an Pi bout rounded to 6 significant places.

def cost(solution)
  # evaluate the expression
  value = solution.expression.eval
  # absolute difference from goal value
  solution.fitness = (round(@goal) - round(value)).abs
end

def round(v)
  ((v * 100000.0).floor).to_f / 100000.0
end

Solution
A candidate solution is comprised of an expression tree and a fitness value. Each solution manages it's own expression tree, so the recombination and mutation operators belong to the solution class.

Expressions are managed as a binary tree of nodes, where a given node has a value and a left and right children. Function nodes are assigned one of the four arithmetic lambda's for their value and a node for each child (terminal or function). Terminal nodes are assigned a floating point constant value. The tree structure is held together by the object references and can be traversed in a traditional manner.

New candidate solutions are prepared with a random expression, created recursively and bounded bounded to a maximum tree depth.

def random_expression(problem, max_depth, curr_depth=1)
  if (curr_depth.to_f/max_depth.to_f) < Random::next_float
    func = problem.function_set[Random::next_int(problem.function_set.length)]
    return GPNode.new(func, random_expression(problem,max_depth,curr_depth+1), random_expression(problem,max_depth,curr_depth+1))
  else
    term = problem.terminal_set[Random::next_int(problem.terminal_set.length)]
    val = term.call
    return GPNode.new(val)
  end
end

Recombined candidate solutions are created via a process of one point crossover between two parent solutions, which is then mutated recursively.

def mutate_expression(problem, node)
  if Random.next_float < heuristic_mutation_rate
    if node.is_leaf? 
      node.value = problem.terminal_set[Random::next_int(problem.terminal_set.length)].call
    else
      node.value = problem.function_set[Random::next_int(problem.function_set.length)]
    end
  end
  if !node.is_leaf?
    mutate_expression(problem, node.left)
    mutate_expression(problem, node.right)
  end
end

Algorithm
The Genetic Programming algorithm is a reusable system that evolves a solution in the context of a problem. The problem contains sufficient information for creating new solutions. The algorithm is executed by calling evolve that initializes the base population can rapidly calls the next_generation method. A breeding set is selected from the population each generation using tournament selection.

Summary
Natural extensions involve varied genetic operators, and more intestinally different problem domains with new functions from which to encode candidate solutions.
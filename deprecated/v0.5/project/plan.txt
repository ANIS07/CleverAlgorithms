Inspired Algorithms
--------------------------------------------------

Project Goal: 
--------------------------------------------------
The goal of the Inspired Algorithms project is to offer the largest set of explained and executable computational intelligence algorithms on the planet.

Project Description:
--------------------------------------------------
The inspired algorithms project concerned with the development of a compendium of guides for implementing and functionally explaining artificial intelligence algorithms drawn from the fields of computational intelligence and nature inspired computation.

Project Deliverables:
--------------------------------------------------
The project has the primary deliverable of a printed and bound compendium (a book). The project has a secondary deliverable that is a website that offers the guides piecewise for free and promotes the book. The project has a tertiary deliverable that is the files of source code used in the guides and offered on the website. 

- Self-published book entitled "Inspired Algorithms: A Handbook of Machine Learning Recipes for Optimization in Ruby", free PDF, $19.99 USD hard copy
- Blog format website located at http://www.InspiredAlgorithms.com
- Open source code project located on google code or github

Project Schedule:
--------------------------------------------------
The target is to complete at least 50 algorithm guides by no later than July 1st 2009. Copy for 11 of the 50 guides has been written although not integrated into the book or website structures. The remaining copy is expected to be completed on a schedule of two guides per week for about 24 weeks (8 per month for nearly 6 months). 

A total of guides per will be released per week for the first 11 weeks, and 2 per week for the remaining 13 weeks. The release of a guide involves the copy integrated into the LaTeX book project, the copy integrated into the webpage project and made publicly accessible, and the code integrated into the source code repository and made publicly accessible.

Project Guides:
--------------------------------------------------
The following provides a complete listing of 50 optimization algorithm guides in the project (in order). The set of algorithms were selected for popularity, interestingness, and diversity of inspiration.

Stochastic Algorithms
01. Random Search: A baseline technique.
02. Iterated Local Search: Repeated application of a construction heuristic.
03. Localized Random Search: Using the past to bias future samples.
04. Adaptive Random Search: Varying step size based on performance.
05. Multiple Restart Random Search: Multiple trials to address convergence.
06. Tabu Search: Prevent searching the same area twice.
07. Stochastic Diffusion Search: Partial solution evaluation and communication.
08. Greedy Randomized Adaptive Search Procedure: Construct solutions using a heuristic and stochastic decisions.

Evolutionary Algorithms
01. Genetic Algorithm: Evolution of a genotype to adapt a phenotype.
02. Evolutionary Programming: Variation and competitive selection on the phenotype.
03. Evolution Strategies: Adaptive phenotypic variation.
04. Genetic Programming: The evolution of programs.
05. Differential Evolution: Vector perturbations with competitive selection.
06. Grammatical Evolution: Evolving a genotype with a context free grammar as the phenotype.
07. Gene Expression Programming: Expressing an evolved genotype as a computer program.
08. Crowding Genetic Algorithm: Locate and maintain multiple ecological niches.
09. Cellular Genetic Algorithm: Evolutionary interactions in a spatial environment.
10. Island Population Genetic Algorithms: Migrating between semi-isolated populations.
11. Messy Genetic Algorithm: Evolving using variable length genomes and genetic linking.
12. Linkage Learning Genetic Algorithm: Learning the relationship between components during evolution.
13. Double Diploid Genetic Algorithm: Evolution where individuals maintain two sets of genetic information.
14. Speciation Genetic Algorithm: Divergence of a population into new species.
15. Co-evolutionary Algorithm: Competing populations with conflicting goals.

Natural and Physical Algorithms
01. Simulated Annealing: Seek a low energy state through controlled temperature reduction.
02. Quantum Annealing: Exploiting the quantum effects of tunneling as a neighborhood function.
03. Stochastic Tunneling Search: Seeking minimum energy by tunneling through the search space.
04. Extremal Optimization: Cyclic search though build up and collapse.
05. Harmony Search Algorithm: Seek harmony through iterative pitch adjustment
06. Cultural Algorithm: Collective social influence on a population.
07. Memetic Algorithm: Combining genetic and non-genetic evolution.

Estimation of Distribution Algorithms
01. Compact Genetic Algorithm: Compressing a population to an individual.
02. Extended Compact Genetic Algorithm: Clustering components in a compressed population.
03. Population-based incremental learning: Evolving a population using a single genome.
04. Univariate Marginal Distribution Algorithm: Re-Sampling based on component frequencies.
05. Bayesian Optimization Algorithm: Re-Sampling a population using a Bayesian network.

Immune System Algorithms
01. Clonal Selection Algorithm: Affinity maturation via antigenic selection.
02. Negative Selection Algorithm: Pattern recognition in the complement of known information.
03. Immune Network Algorithm: Pattern recognition in regulatory cellular networks.
04. Dendritic Cell Algorithm: Context-specific antigen recognition.

Swarm Intelligence Algorithms
01. Ant System: Ant foraging and pheromones as heuristic and history.
02. MAX-MIN Ant System: Elitist stigmergy with restarts.
03. Ant Colony System: Constrained pheromone deposits and decay.
04. Particle Swarm Optimization: Flocking and schooling using local neighborhoods.
05. Repulsive Particle Swarm Optimization: Perturbing the swarm with local repulsion.
06. Bee Colony Optimization: Nectar foraging and communication of honey bees.
07. Bees Algorithm: Honey bee foraging and recruitment.
08. Wasp Swarm Algorithm: Collective intelligence of wasp swarms.
09. Firefly Algorithm: Clustering and synchronization of the flashing of fireflies.
10. Bacterial Foraging Optimization Algorithm: Chemotaxis foraging of a colony of bacterium.

The following list adjunct guides to the 50 algorithm guides that may or may not be included, listed in no particular order:

01. An introduction to Inspired Algorithms
02. Ruby Programing Language Basics
03. Pseudo Random Numbers: Managing stochastic decision making.
04. Testing Inspired Algorithms: Unit testing algorithms, problems and solutions.
05. Saving Inspired Algorithms: Solution storage and algorithm restarts.
06. Visualizing Inspired Algorithms: Surfaces and solutions with R and GNU Plot.
07. Comparing Inspired Algorithms: Statistical Hypothesis testing with R

The following lists additional/replacements/backups to the first 50 guides, listed in no particular order:

01. Hierarchical Bayesian Optimization Algorithm: Modeling partial solutions with Bayesian networks.
02. Artificial Bee Colony Optimization: Foraging across multiple food sources and reporting to the hive.
03. Virtual Bee Algorithm: Locating the largest return of nectar.
04. Honey Bee Algorithm: Allocation of bees to food sources based on expected nectar return.
05. Adaptive Simulated Annealing: Seek minimum energy with a variable cooling schedule.
06. Scatter Search
07. Guided Local Search
08. Variable Neighbourhood Search